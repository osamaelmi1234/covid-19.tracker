{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","error","console","log","lastUpdated","Date","parseInt","updated","toString","countries","concat","reverse","filter","item","itemCountryLower","country","toLowerCase","includes","map","Card","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","padding","Title","marginBottom","Text","value","cases","displayType","thousandSeparator","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","event","target","queries","columns","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d4ce504.chunk.js","sourcesContent":["import React , {useEffect , useState} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport './App.css';\nimport NumberFormat from 'react-number-format';\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\n\n\nfunction App() {\n  \n  const [latest , setLatest] = useState([]);\n  const [results , setResults] = useState([]);\n  const [searchCountries, setSearchCountries] = useState([]);\n  var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n  \n\n useEffect(() => {\n    axios\n        .all([axios.get(\"https://corona.lmao.ninja/v2/all\"), axios.get(\"https://corona.lmao.ninja/v2/countries?sort=country\")])\n\n    .then(responseArr =>  {\n    setLatest(responseArr[0].data);\n    setResults(responseArr[1].data);\n    \n   })\n  .catch(error => {\n    console.log(error)\n  });\n}, [results]);\n  \n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n const reversed = [].concat(results).reverse();\n\n const filterCountries = reversed.filter(item => {\n  let itemCountry = item.country;\n  let itemCountryLower = itemCountry.toLowerCase();\n \n \nreturn searchCountries != \"\" ? itemCountryLower.includes(searchCountries) : item;\n\n});\n\n  const countries = filterCountries.map(data => {\n    \n    return (\n      \n      <Card bg=\"light\" text=\"dark\"  className=\"text-center\" style={{margin:\"10px\"}} key={data.country}>\n    <Card.Img variant=\"top\" src={data.countryInfo.flag}/>\n    <Card.Body style={{padding:\"1vh 4rem\"}}>\n      <Card.Title style={{marginBottom:\"30px\"}}>{data.country}</Card.Title>\n       \n      <Card.Text>Cases:{\" \"} \n       <NumberFormat value={data.cases} displayType={'text'} thousandSeparator={true}/> \n      </Card.Text>\n       <Card.Text>Deaths:{\" \"} \n       <NumberFormat value={data.deaths} displayType={'text'} thousandSeparator={true}/> \n      </Card.Text>\n       <Card.Text>Recovered:{\" \"} \n       <NumberFormat value={data.recovered} displayType={'text'} thousandSeparator={true}/> \n      </Card.Text>\n       <Card.Text>Today's Cases:{\" \"} \n       <NumberFormat value={data.todayCases} displayType={'text'} thousandSeparator={true}/> \n      </Card.Text>\n       <Card.Text>Today's Deaths:{\" \"} \n       <NumberFormat value={data.todayDeaths} displayType={'text'} thousandSeparator={true}/> \n      </Card.Text>\n       <Card.Text>Active:{\" \"}  \n       <NumberFormat value={data.active} displayType={'text'} thousandSeparator={true}/> \n      </Card.Text>\n       <Card.Text>Critical:{\" \"} \n       <NumberFormat value={data.critical} displayType={'text'} thousandSeparator={true}/> \n      </Card.Text>\n      \n    </Card.Body>\n   </Card>\n   \n\n  );\n  });\n\n\n  return (\n    <div className=\"App\">\n    <h1 style={{textAlign:\"center\", marginBottom:\"20px\"}}>COVID-19 Tracker</h1>\n    <CardDeck style={{margin:\"0px\"}}>\n  <Card bg=\"info\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\n    \n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>\n       <NumberFormat value={latest.cases} displayType={'text'} thousandSeparator={true}/> \n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>{lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"danger\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\n   \n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n         <NumberFormat value={latest.deaths} displayType={'text'} thousandSeparator={true}/>\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>{lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"success\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\n  \n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n         <NumberFormat value={latest.recovered} displayType={'text'} thousandSeparator={true}/>\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>{lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<Form style={{margin:\"10px\"}}>\n  <Form.Group controlId=\"formGroupInput\">\n  <Form.Control type=\"text\" \n  placeholder=\"Search a country...\" \n   onChange={event => setSearchCountries(event.target.value.toLowerCase())}/>\n  </Form.Group>\n  \n</Form>\n   <Columns  queries={queries}>\n    {countries}\n    </Columns>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}